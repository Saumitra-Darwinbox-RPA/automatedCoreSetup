from tkinter import StringVar
from tkinter import *
import time
from tkinter import font
from time import gmtime
from datetime import datetime
from tkinter import Tk, messagebox
import tkinter as tk
import selenium.webdriver
from selenium.webdriver.chrome.webdriver import WebDriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import select
from selenium.webdriver.support.select import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time
from openpyxl import *
import os
import sys
import xlwings as xw
import pandas as pd
from datetime import datetime
from tkinter import filedialog,ttk

'''
To Create Employee Impor and upload it
'''


Time_Now = datetime.now()


# ------------------------------------ CSV upload ---------------------------------------

Employee_Import = "D:/Import Files/employee_import.csv"

# --------------------------------------- functions -------------------------------------
# --------------------------------- xlwings to run macro -------------------------------

# To open a dialog box and store selected file

def select_file():
    filetypes = (
        ('text files', '*.txt'),
        ('All files', '*.*')
    )

    global filename1
    #filename1 = StringVar()
    filename1 = filedialog.askopenfilename(
        title='Open a file',
        initialdir='/',
        filetypes=filetypes)

    
        

# --------------------- access macro - To create core exports --------------------

def run_excel_macro():
    """
    Execute an Excel macro
    :param file_path: path to the Excel file holding the macro
    :return: None
    """
        
    try:
        xl_app = xw.App(visible=False, add_book=False)
        wb = xl_app.books.open(filename1)

        run_macro = wb.app.macro('EmployeeImport.Employee_Import')
        run_macro()

        wb.save()
        wb.close()

        xl_app.quit()

    except Exception as ex:
        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
        message = template.format(type(ex).__name__, ex.args)
        print(message)

# ------------------------------------- Tree view for Error report -------------------------------------------

def EntireTree():

    global root2
    root2 = tk.Tk()
    root2.title('Generated by Employee Import macro')

    root2.geometry("850x650") # set the root2 dimensions

    #Frame for TreeView
    global frame1
    frame1 = tk.LabelFrame(root2, text="Excel Data")
    frame1.place(height=500, width=800,rely=0, relx=0.02)


    button2 = tk.Button(root2, text="Load File", command=lambda: Load_excel_data())
    button2.place(rely=0.80, relx=0.45)

    ## Treeview Widget
    global tv1
    tv1 = ttk.Treeview(frame1)
    tv1.place(relheight=1, relwidth=1) # set the height and width of the widget to 100% of its container (frame1).

    treescrolly = tk.Scrollbar(frame1, orient="vertical", command=tv1.yview) # command means update the yaxis view of the widget
    treescrollx = tk.Scrollbar(frame1, orient="horizontal", command=tv1.xview) # command means update the xaxis view of the widget
    tv1.configure(xscrollcommand=treescrollx.set, yscrollcommand=treescrolly.set) # assign the scrollbars to the Treeview Widget
    treescrollx.pack(side="bottom", fill="x") # make the scrollbar fill the x axis of the Treeview widget
    treescrolly.pack(side="right", fill="y") # make the scrollbar fill the y axis of the Treeview widget

    root2.mainloop()

# -------------------------- Functions which are being used inside EntireTree function -----------------------------------

def Load_excel_data():

    filetypes = (
        ('text files', '*.txt'),
        ('All files', '*.*')
    )

    global filename2
    #filename2 = StringVar()
    filename2 = filedialog.askopenfilename(
        title='Open a file',
        initialdir='/',
        filetypes=filetypes)
        
    """If the file selected is valid this will load the file into the Treeview"""
    #file_path = label_file["text"]
    try:
        excel_filename = r"{}".format(filename2)
        if excel_filename[-4:] == ".csv":
            df = pd.read_csv(excel_filename)
        else:
            df = pd.read_excel(excel_filename,sheet_name='employee_import')
        print(excel_filename)
        print(filename2)

    except ValueError:
        tk.messagebox.showerror("Information", "The file you have chosen is invalid")
        return None
    except FileNotFoundError:
        tk.messagebox.showerror("Information", f"No such file as {filename2}")
        return None



    clear_data()
    tv1["column"] = list(df.columns)
    tv1["show"] = "headings"
    for column in tv1["columns"]:
        tv1.heading(column, text=column) # let the column heading = column name

    df_rows = df.to_numpy().tolist() # turns the dataframe into a list of lists
    for row in df_rows:
        tv1.insert("", "end", values=row) # inserts each list into the treeview. For parameters see https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Treeview.insert
    return None


def clear_data():
    tv1.delete(*tv1.get_children())
    return None

# ------------- for Chromedriver, adjustment to add it in the exe --------------------

def resource_path2(relative_path):
    try:
        base_path = sys.MEIPASS
    except Exception:
        base_path = os.path.dirname(__file__)
    return base_path + relative_path

# -------------- for Image, adjustment to add it in the exe -------------------------

def resource_path_logo2(relative_path_logo):
    try:
        base_path_logo = sys._MEIPASS
        print(base_path_logo)
    except Exception:
        base_path_logo = os.path.dirname(__file__)
        print(base_path_logo)
    return base_path_logo + relative_path_logo

driver = None
global relative_path

 #pyi-makespec Py_Selenium.py --onefile --noconsole --add-binary "driver\chromedriver.exe;driver\" --add-data "Img\Dbox4.png;Img\"  --name Core_DCT
 #pyinstaller --clean Core_DCT.spec  


def on_open():
    pass


def on_close():
    global driver

    if driver:
        driver.close()
        driver = None



def UserLogin ():
    pass

# --------------------- Access the Employee Import Page and Upload employee import csv----------------------------------

def Upload_file_1():

    
    global driver

    if not driver:
        print(os.path.dirname(__file__))
        driver = selenium.webdriver.Chrome(resource_path2("/driver/chromedriver.exe"))
        url = WebLink.get()
        driver.get(url)
        driver.maximize_window()

    # Admin's login
    driver.find_element_by_id("UserLogin_username").send_keys(username1.get())
    driver.find_element_by_id("UserLogin_password").send_keys(password1.get())
    driver.find_element_by_id("login-submit").click()
    driver.implicitly_wait(10)
    

    # How are you feeling today?
    time.sleep(3)
    try:
        driver.find_element_by_xpath('//*[@id="pulse_form"]/div/div/div')
        driver.find_element_by_xpath('//*[@id="5"]').click()
        driver.find_element_by_xpath('//*[@id="plus-status-btn"]').click()
    except:
        pass
    
    try:
    #Click on the user's profile pic and switch to admin
        driver.find_element_by_xpath('//*[@id="dasboard-bigheader"]/header/div[4]/ul/li[3]/div/div/img').click()
        driver.find_element_by_xpath('//*[@id="dasboard-bigheader"]/header/div[4]/ul/li[3]/div/ul/li[2]/a').click()
        driver.implicitly_wait(30)

        time.sleep(5)
    except:
        pass

    #https://training2.darwinbox.in/settings/accountdetails
    driver.get(WebLink.get() + '/settings/accountdetails')

    time.sleep(5)

    time.sleep(5)

    driver.get(WebLink.get() + '/import/asyncImports/type/employees')

    wait = WebDriverWait(driver, 30)

    time.sleep(5)
    driver.find_element_by_xpath('//*[@id="upload_file[]"]').send_keys(Employee_Import)
    driver.implicitly_wait(20)
    element = wait.until(EC.element_to_be_clickable(((By.NAME,'upload'))))
    time.sleep(4)
    driver.find_element_by_xpath('//*[@id="upload_import_file"]/div/input').click()
    driver.implicitly_wait(20)

    time.sleep(5)

    # -------------------------------- Selecting column headers from dropdown -----------------------------------------

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[1]/td[1]/select').send_keys('Firstname*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[2]/td[1]/select').send_keys('Middle Name')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[3]/td[1]/select').send_keys('Lastname')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[4]/td[1]/select').send_keys('Email*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[5]/td[1]/select').send_keys('Selfservice*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[6]/td[1]/select').send_keys('Employee ID')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[7]/td[1]/select').send_keys('Date of Joining*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[8]/td[1]/select').send_keys('Date of Birth*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[9]/td[1]/select').send_keys('Probation Period')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[10]/td[1]/select').send_keys('Date Of Confirmation')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[11]/td[1]/select').send_keys('Manager Email/Employee Number')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[12]/td[1]/select').send_keys('HRBP Employee ID')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[13]/td[1]/select').send_keys('Personal Email ID')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[14]/td[1]/select').send_keys('Employee Type*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[15]/td[1]/select').send_keys('Employee Sub Type')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[19]/td[1]/select').send_keys('Designation Code*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[20]/td[1]/select').send_keys('Functional Area Code')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[22]/td[1]/select').send_keys('Contribution Level')
    driver.implicitly_wait(10)
    
    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[26]/td[1]/select').send_keys('Cost Center ID')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[27]/td[1]/select').send_keys('Office Location Work Area Code*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[29]/td[1]/select').send_keys('Gender*')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[52]/td[1]/select').send_keys('Personal mobile no')
    driver.implicitly_wait(10)
    
    try:
        driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[81]/td[1]/select').send_keys('del AADHAR')
        driver.implicitly_wait(10)
    except:
        driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[81]/td[1]/select').send_keys('Aadhaar')
        driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[82]/td[1]/select').send_keys('PAN')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[83]/td[1]/select').send_keys('Primary Mobile Number')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[101]/td[1]/select').send_keys('UAN Number')
    driver.implicitly_wait(10)

    driver.find_element_by_xpath('/html/body/div[4]/div/div[2]/table/tbody/tr[103]/td[1]/select').send_keys('Blood group')
    driver.implicitly_wait(10)


    driver.execute_script("window.scrollTo(0, -500)") 

    time.sleep(5)

    driver.find_element_by_xpath('/html/body/div[2]/div/section/div/div[1]/div/div/div/div[6]/form/div/input').click()

    time.sleep(5)


def Help_window():
    messagebox.showinfo(title="How to use this executable",message=InfoForTHeUser)

InfoForTHeUser ="Please make sure that you have used the Automated DCT to take the Employee export and the exported Employee Import CSV is present in 'D: Import files' folder. \r\n\r\nSome points to remeber -> \r\n\r\n 1. Please make sure that you are adding the entire instance link that is, make sure to include 'https://' also \r\n\r\n 2. Please add the correct user ID and Password \r\n\r\n 3. 'Delays' are added purposely so as to let the website load all its elements.\r\n \r\n\r\n Information about buttons -> \r\n\r\n \r\n 1. Upload Files  -> A chrome window will open and maximise itself then logging in to the system by using the Login details provided by the user, and at the end, CSV export from D drive, Import files folder will be uploaded \r\n\r\n 4. Chrome close -> will close this program\r\n"


root_main  = tk.Tk()

root_main.title('Employee_Import')

root_main.geometry('400x350+150+150')

root_main['bg'] = '#F8FAFA'

myFont = font.Font(family='Satisfy',size=9,weight='bold')
myFont2 = font.Font(family='Playfair Display',size=9)

b4 = tk.Label(root_main,text="When was the Core Master Import completed? ",bg='#F8FAFA',font=myFont2).grid(row=1,column=1,padx=70,pady=10)

Radio_button_with_common_variable = IntVar()
CheckBox_Contribution1 = tk.Radiobutton(root_main, text="After 00.00 am and Before 06.00 am", variable=Radio_button_with_common_variable, value=1, activebackground='blue',bg='#ADD8E6',fg='black',font=myFont2).grid(row=2,column=1,padx=70,pady=5)

CheckBox_Contribution1 = tk.Radiobutton(root_main, text="After 06.00 am and Before 12.00 pm", variable =
Radio_button_with_common_variable, value=2, activebackground='blue',bg='#ADD8E6',fg='black',font=myFont2).grid(row=3,column=1,padx=70,pady=5)

CheckBox_Contribution1 = tk.Radiobutton(root_main, text="After 12.00 pm and Before 18.00 pm", variable=Radio_button_with_common_variable, value=3, activebackground='blue',bg='#ADD8E6',fg='black',font=myFont2).grid(row=4,column=1,padx=70,pady=5)

CheckBox_Contribution1 = tk.Radiobutton(root_main, text="After 18.00 pm and Before 24.00 pm", variable=Radio_button_with_common_variable, value=4, activebackground='blue',bg='#ADD8E6',fg='black',font=myFont2).grid(row=5,column=1,padx=70,pady=5)

def Evaluate_UserInput_and_TImeNow ():

    if Radio_button_with_common_variable.get() == 1:
        tk.Label(root_main,text="Text visib",bg='#F8FAFA',font=myFont2).grid(row=6,column=1,padx=70,pady=10)

    if Radio_button_with_common_variable.get() == 1:
        tk.Label(root_main,text="Have you uploaded the Core_DCT ->",bg='#F8FAFA',font=myFont2).grid(row=6,column=1,padx=70,pady=10)

    if Radio_button_with_common_variable.get() == 1:
        tk.Label(root_main,text="Have you uploaded the Core_DCT ->",bg='#F8FAFA',font=myFont2).grid(row=6,column=1,padx=70,pady=10)

    if Radio_button_with_common_variable.get() == 1:
        tk.Label(root_main,text="Have you uploaded the Core_DCT ->",bg='#F8FAFA',font=myFont2).grid(row=6,column=1,padx=70,pady=10)


def Window_visible_after_Evaluation ():

    global WebLink
    global username1
    global password1
    global img

    root  = tk.Tk()
    root = Toplevel(root_main)
    
    img = PhotoImage(file=resource_path_logo2('/Img/Dbox4.png'))

    Label(root,image=img,height=60).grid(sticky=NE,padx=15,pady=15)

    root.title('Employee_Import')
    #width then hight
    root.geometry('800x480+150+150')

    #root['bg'] = '#5252ff'
    root['bg'] = '#F8FAFA'


    # define font
    myFont = font.Font(family='Satisfy',size=9,weight='bold')
    myFont2 = font.Font(family='Playfair Display',size=9)

    tk.Label(root,text="Client Instance / Website Link",bg='#ADD8E6',fg='black').grid(row=3,column=1,padx=10,pady=10)
    WebLink = StringVar()
    name1 = tk.Entry(root, textvariable=WebLink,width=60,bg='#F5F5F5')
    name1.grid(row=3,column=2,padx=5,pady=10,columnspan=3)

    tk.Label(root,text="User ID / Email ID",activebackground='white',width=20,bg='#ADD8E6',fg='black').grid(row=4,column=1,padx=10,pady=5)
    username1 = StringVar()
    name2 = tk.Entry(root, textvariable=username1,bg='#F5F5F5')
    name2.grid(row=4,column=2,padx=5,pady=10)

    tk.Label(root,text="Password",width=20,bg='#ADD8E6',fg='black').grid(row=4,column=3,padx=10,pady=5)
    password1 = StringVar()
    name3 = tk.Entry(root, textvariable=password1,show="*",bg='#F5F5F5')
    name3.grid(row=4,column=4,padx=5,pady=10)
        
    b1 = tk.Label(root,text="(Note: Ensure you provide all the above inputs)",width=50,background='#F8FAFA',fg='black',font=myFont).grid(row=8,column=1,padx=10,pady=10,columnspan=4)

    b2 = tk.Button(root, text='Select File', command=select_file,width=20,relief=RAISED,activebackground='Grey',background='#ADD8E6',fg='black').grid(row=9,column=1,padx=10,pady=5,columnspan=4)

    b10 = tk.Button(root, text='Create Employee Import', command=run_excel_macro,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=10,column=1,padx=10,pady=5,columnspan=2)
    b11 = tk.Button(root, text='Show Employee Import', command=EntireTree,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=10,column=3,padx=10,pady=5,columnspan=2)

    #Validate data button -> validation ->Error report

    b4 = tk.Label(root,text="",bg='#F8FAFA').grid(row=13,column=1,padx=10,pady=1,columnspan=4)
    
    #b5 = tk.Button(root, text='Chrome Open', command=on_open,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=14,column=1,padx=10,pady=5,columnspan=4)

    #b6 = tk.Button(root, text='Login & Admin', command=UserLogin,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=15,column=1,padx=10,pady=5,columnspan=4)

    b7 = tk.Button(root, text='Upload Files', command=Upload_file_1,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=16,column=1,padx=10,pady=5,columnspan=4)

    b8 = tk.Button(root, text='Chrome Close', command=on_close,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=17,column=1,padx=10,pady=5,columnspan=4)

    b9 = tk.Button(root, text='Help', command=Help_window,width=20,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black').grid(row=18,column=1,padx=10,pady=15,columnspan=4)


    root.mainloop()

    # (Time_Now.hour >= 00 and Time_Now.minute >= 1) and (Time_Now.hour <= 5 and Time_Now.minute <= 59)
    # (Time_Now.hour >= 6 and Time_Now.minute >= 1) and (Time_Now.hour <= 11 and Time_Now.minute <= 59)
    # (Time_Now.hour >= 12 and Time_Now.minute >= 1) and (Time_Now.hour <= 17 and Time_Now.minute <= 59)
    # (Time_Now.hour >= 18 and Time_Now.minute >= 1 ) and (Time_Now.hour <= 23 and Time_Now.minute <= 59)

def Final_Button_visible ():

    tk.Label(root_main,text="If the Employee Import button is enabled then please upload the file \r\n or else please wait till the next Cron runs",font=myFont2,).grid(row=12,column=1,padx=10,pady=10,columnspan=4)

    tk.Button(root_main, text='Employee Import', command=Window_visible_after_Evaluation,width=40,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black',font=myFont2,state=DISABLED).grid(row=13,column=1,padx=10,pady=10,columnspan=4)

    
    if Radio_button_with_common_variable.get() == 1 and (Time_Now.hour >= 6 and Time_Now.minute >= 1) and (Time_Now.hour <= 11 and Time_Now.minute <= 59) : 
        tk.Button(root_main, text='Employee Import', command=Window_visible_after_Evaluation,width=40,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black',font=myFont2,state=NORMAL).grid(row=13,column=1,padx=10,pady=10,columnspan=4)

    if Radio_button_with_common_variable.get() == 2 and (Time_Now.hour >= 12 and Time_Now.minute >= 1) and (Time_Now.hour <= 17 and Time_Now.minute <= 59) : 
        tk.Button(root_main, text='Employee Import', command=Window_visible_after_Evaluation,width=40,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black',font=myFont2,state=NORMAL).grid(row=13,column=1,padx=10,pady=10,columnspan=4)

    if Radio_button_with_common_variable.get() == 3 and (Time_Now.hour >= 18 and Time_Now.minute >= 1 ) and (Time_Now.hour <= 23 and Time_Now.minute <= 59) : 
        tk.Button(root_main, text='Employee Import', command=Window_visible_after_Evaluation,width=40,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black',font=myFont2,state=NORMAL).grid(row=13,column=1,padx=10,pady=10,columnspan=4)
    
    if Radio_button_with_common_variable.get() == 4 and (Time_Now.hour >= 00 and Time_Now.minute >= 1) and (Time_Now.hour <= 5 and Time_Now.minute <= 59) : 
        tk.Button(root_main, text='Employee Import', command=Window_visible_after_Evaluation,width=40,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black',font=myFont2,state=NORMAL).grid(row=13,column=1,padx=10,pady=10,columnspan=4)
    
        
    # else:
    #      tk.Label(root_main,text="Please wait till the next Cron runs",font=myFont2).grid(row=12,column=1,padx=10,pady=10,columnspan=4)

b12 = tk.Button(root_main, text='Evaluate', command=Final_Button_visible,width=40,relief=RAISED,activebackground='Grey',bg='#ADD8E6',fg='black',font=myFont2).grid(row=11,column=1,padx=10,pady=10,columnspan=4)


root_main.mainloop()
